_tasks:
  - echo 'Hello template'
  # - command: ["git init"]
  # only run on project setup
  # when: "{{ _copier_operation == 'copy' }}"

_message_before_copy: |
  Thanks for generating a project using our template.

_message_after_copy: |
  Your project "{{ dbt_project_name }}" has been created successfully!

_message_after_update: |
  Your project "{{ dbt_project_name }}" has been updated successfully!
  In case there

_exclude:
  - ci_requirements.txt
  - test_load_dagbag.py
  - copier.yaml
  - copier.yml
  - .git
  - .github/workflows/main.yml
  - "*.py[co]"
  - __pycache__
  - .DS_Store

services:
  type: str
  multiselect: true
  help: What services do you want to setup?
  choices:
    Base dbt project: setup_dbt_project
    dbt profile for automated runs: setup_dbt_profile
    setup_ci_cd: setup_ci_cd
    Linting with SQLFluff, dbt-checkpoint and-or YMLLint: setup_precommit
    Sample Airflow DAGs: setup_airflow_dags
    dbt-coves config and-or templates: setup_dbtcoves

# dbt project related vars
dbt_project_dir:
  type: str
  when: "{{'setup_dbt_project' in services}}"
  default: "{{ datacoves_env.get('DATACOVES__DBT_HOME', '.') }}"
  help: dbt project directory

dbt_project_name:
  type: str
  when: "{{'setup_dbt_project' in services}}"
  help: What is the name of the dbt project?

# Airflow related vars
dags_path:
  type: str
  when: "{{'setup_airflow_dags' in services or 'setup_ci_cd' in services}}"
  default: "{{ datacoves_env.get('DATACOVES__AIRFLOW_DAGS_PATH', 'orchestrate/dags') }}"
  help: Airflow DAGs path

airflow_artifacts_path:
  type: str
  when: "{{'setup_ci_cd' in services}}"
  default: "{{ datacoves_env.get('DATACOVES__AIRFLOW_DAGS_PATH', 'orchestrate/dags').split('/')[0] }}"
  help: Airflow Artifacts path for unit tests

yml_dags_path:
  type: str
  when: "{{'setup_airflow_dags' in services and yml_dags_confirm_path}}"
  default: "{{datacoves_env.get('DATACOVES__AIRFLOW_DAGS_YML_PATH', 'orchestrate/dags_yml_definitions')}}"
  help: Airflow YML Dags path

# dbt-coves related vars
add_dbtcoves_config_and_templates:
  type: bool
  default: false
  when: "{{not 'setup_dbtcoves' in services and 'setup_dbt_project' in services}}"
  help: Add dbt-coves config and templates?

setup_dbtcoves_config:
  type: bool
  default: true
  when: "{{'setup_dbtcoves' in services}}"
  help: Setup dbt-coves config?

setup_dbtcoves_templates:
  type: bool
  default: true
  when: "{{'setup_dbtcoves' in services}}"
  help: Setup dbt-coves templates?

# CI / CD Related vars

ci_provider:
  type: str
  choices:
    - github
    - gitlab
  when: "{{'setup_ci_cd' in services}}"
  default: github
  help: CI/CD provider

use_dbt_checkpoint:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use dbt-checkpoint?

use_sqlfluff:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use Sqlfluff?

use_yamllint:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use Yamllint?

use_newstuff:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use new stuff?

dbt_checkpoint_version:
  type: str
  help: What dbt-checkpoint version are you using?
  default: "{{ datacoves_env.get('DATACOVES__DBT_CHECKPOINT_VERSION', 'v2.0.6') }}"
  when: "{{use_dbt_checkpoint}}"

yamllint_version:
  type: str
  help: What yamllint version are you using?
  default: "{{ datacoves_env.get('DATACOVES__YAMLLINT_VERSION', '1.36.2') }}"
  when: "{{use_yamllint}}"

sqlfluff_version:
  type: str
  help: What sqlfluff version are you using?
  default: "{{ datacoves_env.get('DATACOVES__SQLFLUFF_VERSION', '3.1.1') }}"
  when: "{{use_sqlfluff}}"

newstuff_version:
  type: str
  help: What new stuff version are you using?
  default: "{{ datacoves_env.get('DATACOVES__NEWSTUFF_VERSION', '0.0.1') }}"
  when: "{{use_newstuff}}"

# dbt related vars
dbt_adapter:
  type: str
  choices:
    - snowflake
    - bigquery
    - redshift
    - databricks
  help: What dbt adapter are you using?
  when: "{{not datacoves_dbt_adapter and ('setup_dbt_profile' in services or setup_ci_cd or setup_sqlfluff)}}"
  default: "{{ datacoves_env.get('DATACOVES__DBT_ADAPTER', 'snowflake') }}"

dbt_profiles_path:
  type: str
  when: "{{ 'setup_dbt_profile' in services or 'setup_ci_cd' in services }}"
  default: "{{ datacoves_env.get('DATACOVES__AIRFLOW_DBT_PROFILE_PATH', 'automate/dbt') }}"
  help: dbt Profile Path for automated runs
