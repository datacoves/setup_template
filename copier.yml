_tasks:
  - command: "git init -b main"
    #   - command: "echo HELLO THERE"
    when: "'setup_dbt_project' in services and _copier_operation == 'copy'"

  # - command: "echo Current operation: {{ _copier_operation }}, Services selected: {{ services }}"
  # - command: "echo HELLO THERE"
  #   when: "('setup_dbt_project' in services) and (_copier_operation == 'copy')"

_message_before_copy: |
  Generating artifacts using our the Datacoves template.

_message_after_copy: |
  Your project "{{ dbt_project_name }}" has been created successfully!

_message_after_update: |
  Your project "{{ dbt_project_name }}" has been updated successfully!

_exclude:
  - ci_requirements.txt
  - test_load_dagbag.py
  - copier.yaml
  - copier.yml
  - .git
  - .github/workflows/main.yml
  - "*.py[co]"
  - __pycache__
  - .DS_Store
  - data.yml
  - answers.yml
  - dbt_setup_test.sh

_jinja_extensions:
  - jinja2_env.EnvExtension

# Main Menu
services:
  type: str
  multiselect: true
  help: Select what you want to set up?
  choices:
    Base dbt project: setup_dbt_project
    Add dbt helper macros: add_dbt_helper_macros
    dbt profile for ci runs: setup_dbt_profile
    Set up CI/CD scripts: setup_ci_cd
    Set up governance with SQLFluff, dbt-checkpoint, and YMLLint: setup_precommit
    Create sample Airflow DAGs: setup_airflow_dags
    Create sample dlt script and Airflow DAG: setup_dlt
    Create dbt-coves config and templates: setup_dbtcoves

# dbt project related vars
dbt_project_dir:
  type: str
  when: "{{'setup_dbt_project' in services or 'setup_ci_cd' in services or 'add_dbt_helper_macros' in services }}"
  default: "{% env 'DATACOVES__DBT_HOME_REL_PATH', '.' %}"
  help: Enter the dbt project directory

dbt_project_name:
  type: str
  when: "{{'setup_dbt_project' in services or 'add_dbt_helper_macros' in services }}"
  help: Enter a name for your dbt project?

store_dbt_tests:
  type: bool
  default: false
  when: "{{'setup_dbt_project' in services}}"
  help: Do you want to store dbt test failures?

dbt_test_audit_schema:
  type: str
  when: "{{ store_dbt_tests }}"
  help: Enter a for the schema to store dbt test audit results
  default: "DBT_TEST__AUDIT"

dbt_time_zone:
  type: str
  when: "{{'setup_dbt_project' in services}}"
  help: Enter the time zone for your project
  default: "America/Los_Angeles"
  choices:
    - America/New_York
    - America/Chicago
    - America/Denver
    - America/Phoenix
    - America/Los_Angeles
    - Europe/London
    - Europe/Berlin

dbt_artifacts_stage:
  type: str
  when: "{{'setup_ci_cd' in services}}"
  default: "PRD_DBT_GENERATED.DBT_ARTIFACTS.ARTIFACTS"
  help: Enter the name of the Snowflake stage where artifacts will be stored

# Airflow related vars
dags_path:
  type: str
  when: "{{'setup_airflow_dags' in services or 'setup_ci_cd' in services}}"
  default: "{% env 'DATACOVES__AIRFLOW_DAGS_PATH', 'orchestrate/dags' %}"
  help: Airflow DAGs path

airflow_artifacts_path:
  type: str
  when: "{{'setup_ci_cd' in services}}"
  default: "{{ {% env 'DATACOVES__AIRFLOW_DAGS_PATH', 'orchestrate/dags' %}.split('/')[0] }}"
  help: Airflow Artifacts path for unit tests

airflow_utils_path:
  type: str
  when: "{{'setup_airflow_dags' in services or 'setup_ci_cd' in services}}"
  default: "{{ {% env 'DATACOVES__AIRFLOW_DAGS_PATH', 'orchestrate/dags' %}.split('/')[0] }}/utils"
  help: Airflow utils path

airflow_tests_path:
  type: str
  when: "{{ add_airflow_tests }}"
  default: "{{ {% env 'DATACOVES__AIRFLOW_DAGS_PATH', 'orchestrate/dags' %}.split('/')[0] }}/test_dags"
  help: Airflow tests path

yml_dags_path:
  type: str
  when: "{{'setup_airflow_dags' in services and yml_dags_confirm_path}}"
  default: "{% env 'DATACOVES__AIRFLOW_DAGS_YML_PATH', 'orchestrate/dags_yml_definitions' %}"
  help: Airflow YML Dags path

# dbt-coves generate related vars
add_dbtcoves_config_and_templates:
  type: bool
  default: false
  when: "{{not 'setup_dbtcoves' in services and 'setup_dbt_project' in services}}"
  help: Add dbt-coves config and templates?

setup_dbtcoves_config:
  type: bool
  default: true
  when: "{{'setup_dbtcoves' in services}}"
  help: Setup dbt-coves config?

setup_dbtcoves_templates:
  type: bool
  default: true
  when: "{{'setup_dbtcoves' in services}}"
  help: Setup dbt-coves templates?

# CI / CD Related vars
ci_provider:
  type: str
  choices:
    - github
    - gitlab
  when: "{{'setup_ci_cd' in services}}"
  default: github
  help: CI/CD provider

add_airflow_tests:
  type: bool
  default: false
  when: "{{'setup_ci_cd' in services}}"
  help: Add CI workflow and helpers for Airflow?

use_dbt_checkpoint:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use dbt-checkpoint?

use_sqlfluff:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use Sqlfluff?

use_yamllint:
  type: bool
  default: false
  when: "{{'setup_precommit' in services}}"
  help: use Yamllint?

dbt_checkpoint_version:
  type: str
  help: What dbt-checkpoint version are you using?
  default: "{% env 'DATACOVES__DBT_CHECKPOINT_VERSION', 'v2.0.6' %}"
  when: "{{use_dbt_checkpoint}}"

yamllint_version:
  type: str
  help: What yamllint version are you using?
  default: "{% env 'DATACOVES__YAMLLINT_VERSION', 'v1.36.2' %}"
  when: "{{use_yamllint}}"

sqlfluff_version:
  type: str
  help: What sqlfluff version are you using?
  default: "{% env 'DATACOVES__SQLFLUFF_VERSION', '3.1.1' %}"
  when: "{{use_sqlfluff}}"

# dbt related vars
dbt_adapter:
  type: str
  choices:
    - snowflake
    - bigquery
    - redshift
    - databricks
  help: Which dbt adapter are you using?
  when: "{{not datacoves_dbt_adapter and ('setup_dbt_profile' in services or setup_ci_cd or setup_sqlfluff)}}"
  default: "{% env 'DATACOVES__DBT_ADAPTER', 'snowflake' %}"

add_dbt_helper_macros:
  type: bool
  default: false
  when: "{{not 'setup_dbtcoves' in services and 'add_dbt_macros' in services}}"
  help: Add Datacoves dbt helper macros?

override_dbt_macros:
  type: bool
  default: false
  when: "{{'setup_dbt_project' in services or 'add_dbt_helper_macros' in services }}"
  help: Override standard dbt macros (ref, generate_schema_name)?

base_database_name:
  type: str
  when: "{{ ('setup_dbt_profile' in services or 'setup_ci_cd' in services) and add_dbt_helper_macros }}"
  default: "analytics"
  help: Enter the base database name for example, PROD_ANALYTICS would be analytics

dbt_profiles_path:
  type: str
  when: "{{ 'setup_dbt_profile' in services or 'setup_ci_cd' in services }}"
  default: "{% env 'DATACOVES__AIRFLOW_DBT_PROFILE_PATH', 'automate/dbt' %}"
  help: dbt Profile Path for automated runs

automated_scripts_path:
  type: str
  when: "{{ 'setup_ci_cd' in services }}"
  default: "{{ {% env 'DATACOVES__AIRFLOW_DBT_PROFILE_PATH', 'automate/' %}.split('/')[0] }}"
  help: Path for automated scripts

# Variables to simplify folder names
z_dbt_macros:
  type: bool
  default: "{{ ('setup_dbt_project' in services) or ('add_dbt_helper_macros' in services) }}"
  when: false

z_dbt_coves:
  type: bool
  default: "{{ 'setup_dbtcoves' in services or add_dbtcoves_config_and_templates }}"
  when: false

z_github_actions:
  type: bool
  default: "{{ 'setup_ci_cd' in services and ci_provider=='github' }}"
  when: false

z_gitlab_ci:
  type: bool
  default: "{{ 'setup_ci_cd' in services and ci_provider=='gitlab' }}"
  when: false

z_pre_commit:
  type: bool
  default: "{{ use_sqlfluff or use_yamllint or use_dbt_checkpoint }}"
  when: false
